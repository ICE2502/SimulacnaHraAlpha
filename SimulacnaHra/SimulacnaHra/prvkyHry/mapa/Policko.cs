///////////////////////////////////////////////////////////
//  Policko.cs
//  Implementation of the Class Policko
//  Generated by Enterprise Architect
//  Created on:      17-2-2016 17:13:22
//  Original author: Dobroslav Grygar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using SimulacnaHra.gui;
using SimulacnaHra.hra;
using SimulacnaHra.matematika;
using SimulacnaHra.prvkyHry.dopravneProstriedky;
using SimulacnaHra.prvkyHry.infrastruktura;
using SimulacnaHra.prvkyHry.vyroba;
using SimulacnaHra.Properties;

namespace SimulacnaHra.prvkyHry.mapa {

    /// <summary>
    /// PolÌËko je z·kladn· orientaËn· a logick· jednotka hernej plochy
    /// </summary>
    [Serializable]
	public class Policko : ZakladObrazku{

		private bool aPevnina;
		private Poloha aPoloha;
		private Infrastruktura aZastavane;
        private Vyroba aVyroba;
	    private List<DopravnyProstriedok> aDopravneProst; 

        private const int cVysusenia = 200;
        private const int cZavodnenia = 300;

        public const int cVelkostPolicka = 40;


        public Infrastruktura Zastavane { get { return aZastavane; } set { aZastavane = value; } }
        public Vyroba Vyroba { get { return aVyroba; } set { aVyroba = value; } }
        public Poloha Poloha { get { return aPoloha; } }
        public Vrchol Vrchol { get; set; }
        public Hrana Hrana { get; set; }
	    public bool Pevnina {
	        get { return aPevnina; }
	    }

        /// <summary>
        /// Vytvorenie polÌËka, poliËko sa pri vytv·ranÌ rozhoduje, Ëi bude maù na sebe prÌrodn˝ prvok, alebo nie
        /// </summary>
        /// <param name="paPoloha">poloha polÌËka</param>
        /// <param name="paPevnina"> Ëi je pevnina</param>
        public Policko(Poloha paPoloha, bool paPevnina)
        {
            aPoloha = paPoloha;
            aZastavane = null;
            aPevnina = paPevnina;
            aDopravneProst = new List<DopravnyProstriedok>();
            if (aPevnina == true)
            {
                NastavObrazok(Resources.grass, "grass");
                if (Nahoda.NahodneCislo0az1() < 0.2)
                {
                    aZastavane = new Priroda(aPoloha); 
                }
            }
            else {
                NastavObrazok(Resources.water, "water");
            }

            OdsadenieZLava = aPoloha.Stlpec * Policko.cVelkostPolicka;
            OdsadenieZHora = aPoloha.Riadok * Policko.cVelkostPolicka;
		}

        /// <summary>
        /// Ëi obsahuje nejakÈ dopravnÈ prostriedky
        /// </summary>
        /// <returns></returns>
	    public bool Prostriedky()
	    {
	        var pocet = aDopravneProst.Count();
            return pocet > 0;
	    }

        /// <summary>
        /// ZobrazÌ rozhrania prostriedkov na polÌËku
        /// </summary>
	    public void ZobrazFormProstriedkov()
	    {
            foreach (var item in aDopravneProst)
            {
                item.ZobrazForm();
            }
	    }

        /// <summary>
        /// overenie, Ëi je moûn· v·stavba v˝roby
        /// </summary>
        /// <returns>v˝sledok</returns>
	    public bool JeMoznaVystavbaVyroby()
        {
            return aPevnina != false && aVyroba == null;
        }

        public bool JeMoznaVystavbaRafinerie()
        {
            if (JeMoznaVystavbaVyroby())
            {
                int stredovyRiadok = HernaPlocha.PocetRiadkov / 2;
                int stredovyStlpec = HernaPlocha.PocetStlpcov / 2;
                int polomerRiadkov = stredovyRiadok - 17;
                int polomerStlpcov = stredovyStlpec - 17;
                if (Math.Pow((double)(Poloha.Riadok - stredovyRiadok) / (double)polomerRiadkov, 2) + Math.Pow((double)(Poloha.Stlpec - stredovyStlpec) / (double)polomerStlpcov, 2) > 1)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// overenie, Ëi je moûn· v·stavba ropnej ploöiny
        /// </summary>
        /// <returns>v˝sledok</returns>
        public bool JeMoznaVystavbaRopnejPlosiny()
        {
            return aPevnina != true && aVyroba == null;
        }

        /// <summary>
        /// Vykreslenie
        /// </summary>
        /// <param name="paGafika">gragickÈ zariadenie</param>
        public void DrawImage(Graphics paGafika)
        {
            if (aVyroba != null) {
                if (Vykreslene.PridajVyrobu(aVyroba))
                {
                    aVyroba.DrawImage(paGafika);
                }
            }
            else if (aZastavane != null)
            {
                aZastavane.DrawImage(paGafika);
            }
            else {
                base.DrawImage(paGafika);
            }
        }

        /// <summary>
        /// overenie, Ëi kolo kliknutÈ na danÈ polÌËko
        /// </summary>
        /// <param name="paX">poloha kurzora X</param>
        /// <param name="paY">poloha kurzora Y</param>
        /// <returns></returns>
        public bool BoloKliknute(int paX, int paY) {
            if (aVyroba != null)
            {
                return aVyroba.Kliknutie(paX, paY);
            }
            else if (aZastavane != null)
            {
                return aZastavane.Kliknutie(paX, paY);
            }
            else
            {
                return Kliknutie(paX, paY);
            }
        }

        /// <summary>
        /// Moûnosù v˝stavby
        /// </summary>
        /// <returns>v˝sledok</returns>
        public bool MozemStavat() {

            bool mozemStavat = false;

            if (aPevnina && aVyroba == null)
            {
                if (aZastavane == null)
                {
                    mozemStavat = true;
                }
                else if (aZastavane.ZburatelneAutomaticky)
                {
                    mozemStavat = true;
                }
            }
            return mozemStavat;
        }

        /// <summary>
        /// v˝stavby cersty
        /// </summary>
        /// <param name="paSmer">smer</param>
        public void PostavCestu(int paSmer) {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            if (paSmer > 0 && paSmer <= Enum.GetNames(typeof(SmerCesty)).Length)
            {
                if (this.MozemStavat())
                {
                    this.Zburaj(false);
                    Cesta cest = new Cesta((SmerCesty)paSmer, aPoloha);
                    if(spol.UpravFinancie(-cest.Cena)){
                        aZastavane = cest;
                        Hra.DajInstanciu().DajHernuPlochu().PrejdiPolicka();
                    }
                }
            }
            else 
            {
                Console.WriteLine("Nie je mozne stavat");
            }
        }

        public void PostavZeleznicu(int paSmer) {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            if (paSmer > 0 && paSmer <= Enum.GetNames(typeof(SmerInf)).Length)
            {
                if (this.MozemStavat())
                {
                    this.Zburaj(false);
                    Zeleznica zel= new Zeleznica((SmerInf)paSmer, aPoloha);
                    if (spol.UpravFinancie(-zel.Cena))
                    {
                        aZastavane = zel;
                        Hra.DajInstanciu().DajHernuPlochu().PrejdiPolicka();
                    }
                }
            }
            else
            {
                Console.WriteLine("Nie je mozne stavat");
            }
        }

        /// <summary>
        /// V˝stavba bÛje
        /// </summary>
        public void PostavBoju() {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            if(!aPevnina && aZastavane == null && aVyroba == null){
                Boja boj = new Boja(aPoloha);
                if (spol.UpravFinancie(-boj.Cena)) 
                {
                    aZastavane = boj;
                }
            }
        }

        /// <summary>
        /// Vyb˙ranie obsahu polÌËky, je rozdiel, Ëi to vol· hr·Ë, alebo hra
        /// </summary>
        /// <param name="paVyvolalUzivatel">Ëi to vol· hr·Ë</param>
        public void Zburaj(bool paVyvolalUzivatel)
        {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            if (aVyroba == null && aZastavane != null)
            {
                if (spol.UpravFinancie(-aZastavane.NakladyNaZburanie))
                {
                    if (aZastavane is MiestoZastavenia)
                    {
                        if (!(aZastavane as MiestoZastavenia).MozemZburat)
                        {
                            Sprava.Info("Nie je moûnÈ zb˙raù miesto zastavenia! \r\n Eöte je zaradenÈ v zozneme cieæov!");
                            return;
                        }
                    }

                    if (aZastavane is Stanica)
                    {
                        Policko[,] matica = Hra.DajInstanciu().DajHernuPlochu().DajMaticu();
                        if ((aZastavane as Stanica).Odstavene.Any())
                        {
                            Sprava.Info("Nie je moûnÈ zb˙raù stanicu! \r\n Nach·dzaj˙ sa tam dopravnÈ prostriedky!");
                            return;
                        }
                        (aZastavane as Stanica).Zburaj();
                        Infrastruktura zast = aZastavane;

                        for (int riadok = 0; riadok < HernaPlocha.PocetRiadkov; riadok++)
                        {
                            for (int stlpec = 0; stlpec < HernaPlocha.PocetStlpcov; stlpec++)
                            {
                                if (matica[riadok, stlpec].Zastavane != null &&
                                    matica[riadok, stlpec].Zastavane.Equals(zast))
                                {
                                    matica[riadok, stlpec].Zastavane = null;
                                }
                            }

                        }
                    }
                    if (Prostriedky())
                    {
                        Sprava.Info("Nie je moûnÈ zb˙raù obsah polÌËka! \r\n Nach·dzaj˙ sa tam dopravnÈ prostriedky!");
                        return;
                    }
                    aZastavane = null;
                    Hra.DajInstanciu().DajHernuPlochu().PrejdiPolicka();
                }
            }
            else
            {
                if (paVyvolalUzivatel) Sprava.Info("Nie je moûnÈ zb˙raù!");
            }
        }
        
        /// <summary>
        /// Konvertovanie peviny na vodu, alebo naopak
        /// </summary>
        public void Konvertuj()
        {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            if(aPoloha.Riadok != 0 && aPoloha.Stlpec != 0 && aPoloha.Riadok != HernaPlocha.PocetRiadkov-1 && aPoloha.Stlpec != HernaPlocha.PocetStlpcov-1)
            {
                if (!aPevnina && aVyroba == null && aZastavane == null)
                {
                    if (spol.UpravFinancie(-cVysusenia))
                    {
                        aPevnina = true;
                        NastavObrazok(Resources.grass, "grass");
                    }
                }
                else if (MozemStavat())
                {
                    if (spol.UpravFinancie(-cZavodnenia))
                    {
                        this.Zburaj(false);
                        aPevnina = false;
                        NastavObrazok(Resources.water, "water");
                    }
                }
                else
                {
                    Sprava.Info("Nie je moûnÈ konvertovaù");
                }
            }
            else
            {
                Sprava.Info("Nie je moûnÈ konvertovaù! \r\n " +
                            "Na okrajoch mapy je povinn· voda!");
            }
        }

        /// <summary>
        /// V˝stavba doku
        /// </summary>
        /// <param name="paSmer">jeho smer</param>
        public void PostavDok(int paSmer)
        {
            Policko[,] matica = Hra.DajInstanciu().DajHernuPlochu().DajMaticu();
            Dok dk = null;
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            if (MozemStavat())
            {
                switch (paSmer)
                {
                    case (int)SmerDoku.dole:
                        if (!matica[aPoloha.Riadok + 1, aPoloha.Stlpec].aPevnina && matica[aPoloha.Riadok + 1, aPoloha.Stlpec].aZastavane == null)
                        {
                            dk = new Dok(aPoloha, SmerDoku.dole);
                        }
                        break;

                    case (int)SmerDoku.hore:
                        if (!matica[aPoloha.Riadok - 1, aPoloha.Stlpec].aPevnina && matica[aPoloha.Riadok - 1, aPoloha.Stlpec].aZastavane == null)
                        {
                            dk = new Dok(aPoloha, SmerDoku.hore);
                        }
                        break;

                    case (int)SmerDoku.vpravo:
                        if (!matica[aPoloha.Riadok, aPoloha.Stlpec + 1].aPevnina && matica[aPoloha.Riadok, aPoloha.Stlpec + 1].aZastavane == null)
                        {
                            dk = new Dok(aPoloha, SmerDoku.vpravo);
                        }
                        break;

                    case (int)SmerDoku.vlavo:
                        if (!matica[aPoloha.Riadok, aPoloha.Stlpec - 1].aPevnina && matica[aPoloha.Riadok, aPoloha.Stlpec - 1].aZastavane == null)
                        {
                            dk = new Dok(aPoloha, SmerDoku.vlavo);
                        }
                        break;
                }
                if ( dk != null && spol.OverVydavok(-dk.Cena) && OverOkolieStaniceZoskupenia(dk, 1, 1))
                {
                    aZastavane = dk;
                    spol.UpravFinancie(-dk.Cena);
                }
                else
                {
                    Sprava.Info("Nie je moûn· v˝stavba doku!");
                }
            }
            else
            {
                Sprava.Info("Nie je moûn· v˝stavba doku!");
            }
            
        }

        /// <summary>
        /// V˝stavba z·stavky pre cestnÈ vozidl·
        /// </summary>
        /// <param name="upresnenieCinnosti">ktor· z nich</param>
        public void PostavZastavku(int upresnenieCinnosti)
        {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            try 
            {
                Zastavka zast;

                if (aZastavane != null)
                {
                    Cesta c = (Cesta)aZastavane;
                    if (upresnenieCinnosti == (int)SmerZast.horizontalny && c.Orientacia == SmerCesty.vodorovne)
                    {
                        zast = new Zastavka(aPoloha, SmerZast.horizontalny);
                    }
                    else
                    {
                        zast = new Zastavka(aPoloha, SmerZast.vertikalny);
                    }
                    if (spol.OverVydavok(-zast.Cena) && OverOkolieStaniceZoskupenia(zast, 1, 1))
                    {
                        aZastavane = zast;
                        Hra.DajInstanciu().DajHernuPlochu().PrejdiPolicka();
                        spol.UpravFinancie(-zast.Cena);
                    }
                }
            }catch (InvalidCastException e)
            {
                Sprava.Info("Nie je mozne postavit zastavku");
            }
           
        }

        public void PostavStanicu(int upresnenieCinnosti)
        {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            try
            {
                ZeleznicnaStanica zelSt;
                if (aZastavane != null)
                {
                    Zeleznica z = (Zeleznica)aZastavane;
                    if (upresnenieCinnosti == (int)SmerZast.horizontalny && z.Orientacia == SmerInf.horizontalny)
                    {
                        zelSt = new ZeleznicnaStanica(aPoloha, SmerZast.horizontalny);
                    }
                    else
                    {
                        zelSt = new ZeleznicnaStanica(aPoloha, SmerZast.vertikalny);
                    }
                    if (spol.OverVydavok(-zelSt.Cena) && OverOkolieStaniceZoskupenia(zelSt, 1, 1))
                    {
                        aZastavane = zelSt;
                        Hra.DajInstanciu().DajHernuPlochu().PrejdiPolicka();
                        spol.UpravFinancie(-zelSt.Cena);
                    }
                }
                else
                {
                    Sprava.Info("Nie je mozne postavit stanicu");
                }
            }
            catch (InvalidCastException e)
            {
                Sprava.Info("Nie je mozne postavit stanicu");
            }

        }

        /// <summary>
        /// V˝stavba letiska
        /// </summary>
        public void PostavLetisko()
        {
            Hra hra = Hra.DajInstanciu();
            Policko[,] matica = hra.DajHernuPlochu().DajMaticu();
            bool mozemStavat = true;

            Letisko letisko = new Letisko(Poloha);

            for (int riadok = letisko.Poloha.Riadok; riadok < letisko.Poloha.Riadok + letisko.PocetRiadkov; riadok++)
            {
                for (int stlpec = letisko.Poloha.Stlpec; stlpec < letisko.Poloha.Stlpec + letisko.PocetStlpcov; stlpec++)
                {
                    if (riadok >= HernaPlocha.PocetRiadkov || stlpec >= HernaPlocha.PocetStlpcov || !matica[riadok, stlpec].MozemStavat())
                    {
                        mozemStavat = false;
                        break;
                    }
                }
            }

            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            if (mozemStavat && spol.OverVydavok(-letisko.Cena) && OverOkolieStaniceZoskupenia(letisko, letisko.PocetRiadkov, letisko.PocetStlpcov))
            {
                for (int riadok = letisko.Poloha.Riadok; riadok < letisko.Poloha.Riadok + letisko.PocetRiadkov; riadok++)
                {
                    for (int stlpec = letisko.Poloha.Stlpec; stlpec < letisko.Poloha.Stlpec + letisko.PocetStlpcov; stlpec++)
                    {
                        var hladanePolicko = matica[riadok, stlpec];
                        hladanePolicko.Zburaj(false);
                        hladanePolicko.Zastavane = letisko;
                    }
                }
                spol.UpravFinancie(-letisko.Cena);
            }
            else
            {
                Sprava.Info("Nie je moûnÈ postaviù letisko");
            }
        }

        /// <summary>
        /// Overenie okolia zoskupenia, rozhoduje Ëi pridaù stanicu uû ku existuj˙cemu zoskupenium
        /// alebo Ëi vytvori novÈ. 
        /// </summary>
        /// <param name="paStavana">stavan· stanica</param>
        /// <param name="paRozmerRiadkov">rozmer</param>
        /// <param name="paRozmerStlpcov">rozmer</param>
        /// <returns>v˝sledok</returns>
        private bool OverOkolieStaniceZoskupenia(Stanica paStavana, int paRozmerRiadkov, int paRozmerStlpcov) {
            
            int zacRiad = aPoloha.Riadok - 1;
            int zacStlp = aPoloha.Stlpec - 1;
            
            int konRiad = aPoloha.Riadok + paRozmerRiadkov;
            int konStlp = aPoloha.Stlpec + paRozmerStlpcov;

            Hra hra = Hra.DajInstanciu();
            Policko[,] matica = hra.DajHernuPlochu().DajMaticu();

            ZoskupenieStanic zosk = null;
            int pocetNajdenachZosk = 0;

            for (int riadok = zacRiad; riadok <= konRiad; riadok++)
            {
                for (int stlpec = zacStlp; stlpec <= konStlp; stlpec++)
                {
                    Policko aktualne = matica[riadok, stlpec];
                    if(aktualne.Zastavane is Stanica)
                    {
                        if (zosk == null || !zosk.Equals((aktualne.Zastavane as Stanica).Zoskupenie))
                        {
                            zosk = (aktualne.Zastavane as Stanica).Zoskupenie;
                            pocetNajdenachZosk++;
                        }
                    }
                }
            }

            if (pocetNajdenachZosk == 0)
            {
                zosk = new ZoskupenieStanic();
                paStavana.Zoskupenie = zosk;
                zosk.PridajStanicu(paStavana);
                hra.Spolocnost.PridajStanicu(zosk);
                OverOkolieStaniceVyroba(paStavana, paRozmerRiadkov, paRozmerStlpcov);
                return true;
            }
            else if (pocetNajdenachZosk == 1)
            {
                paStavana.Zoskupenie = zosk;
                zosk.PridajStanicu(paStavana);
                hra.Spolocnost.PridajStanicu(zosk);
                OverOkolieStaniceVyroba(paStavana, paRozmerRiadkov, paRozmerStlpcov);
                return true;
            }

            return false;
        }

        /// <summary>
        /// Ak sa v okolÌ stanice nach·dza nejak· eöte nezaraden· v˝roba, tak sa zaradÌ
        /// </summary>
        /// <param name="paStavana">stavan· stanica</param>
        /// <param name="paRozmerRiadkov">rozmer</param>
        /// <param name="paRozmerStlpcov">rozmer</param>
        private void OverOkolieStaniceVyroba(Stanica paStavana, int paRozmerRiadkov, int paRozmerStlpcov)
        {

            int zacRiad = aPoloha.Riadok - 1;
            int zacStlp = aPoloha.Stlpec - 1;

            int konRiad = aPoloha.Riadok + paRozmerRiadkov;
            int konStlp = aPoloha.Stlpec + paRozmerStlpcov;

            Hra hra = Hra.DajInstanciu();
            Policko[,] matica = hra.DajHernuPlochu().DajMaticu();

            ZoskupenieStanic zosk = paStavana.Zoskupenie;

            for (int riadok = zacRiad; riadok <= konRiad; riadok++)
            {
                for (int stlpec = zacStlp; stlpec <= konStlp; stlpec++)
                {
                    Policko aktualne = matica[riadok, stlpec];
                    if (aktualne.Vyroba != null)
                    {
                        if (aktualne.Vyroba.Zoskupenie == null)
                        {
                            aktualne.Vyroba.Zoskupenie = zosk;
                            zosk.PridajVyrobu(aktualne.Vyroba);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Pridanie dopravnÈho prostriedku
        /// </summary>
        /// <param name="paDopPr"></param>
	    public void PridajDopravnyProstriedok(DopravnyProstriedok paDopPr)
	    {
            aDopravneProst.Add(paDopPr);
	    }

        /// <summary>
        /// Odobratie dopravnÈho prostriedku
        /// </summary>
        /// <param name="paDopPr"></param>
        public void OdoberDopravnyProstriedok(DopravnyProstriedok paDopPr)
        {
            aDopravneProst.Remove(paDopPr);
        }
	}//end Policko

}//end namespace mapa