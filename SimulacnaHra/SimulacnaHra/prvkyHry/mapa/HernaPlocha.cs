///////////////////////////////////////////////////////////
//  HernaPlocha.cs
//  Implementation of the Class HernaPlocha
//  Generated by Enterprise Architect
//  Created on:      17-2-2016 17:13:21
//  Original author: Dobroslav Grygar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using SimulacnaHra.hra;
using SimulacnaHra.matematika;
using SimulacnaHra.prvkyHry.infrastruktura;
using SimulacnaHra.prvkyHry.vyroba;

namespace SimulacnaHra.prvkyHry.mapa
{

    /// <summary>
    /// Hern· polcha m· na starosti generovanie mapy a v˝roby
    /// a vytv·ranie digrafu z cestnej siete.
    /// </summary>
    [Serializable]
    public class HernaPlocha
    {
        private Policko[,] aMatica;
        private const int CBocnePolia = 5;
        private List<Mesto> aMesta;
        private List<Vyroba> aVyroba;
        private int aPoradieMesta;
        private List<Vrchol> aZoznamVrcholov;
        private List<Hrana> aZoznamHran;

        public static int PocetRiadkov { get; set; }
        public static int PocetStlpcov { get; set; }

        public List<Mesto> ZoznamMiest { get { return aMesta; } }
        public List<Vyroba> ZoznamVyroby { get { return aVyroba; } }
        public List<Vrchol> ZoznamVrcholov { get { return aZoznamVrcholov; } }
        public List<Hrana> ZoznamHran { get { return aZoznamHran; } }
        public List<ZoskupenieStanic> ZoznamPrirodzenychStanic { get; private set; }

        /// <summary>
        /// Inicializ·cia a spustenie generovania
        /// </summary>
        public HernaPlocha()
        {
            aPoradieMesta = 0;
            aMatica = new Policko[PocetRiadkov, PocetStlpcov];
            aMesta = new List<Mesto>();
            aVyroba = new List<Vyroba>();
            aZoznamHran = new List<Hrana>();
            aZoznamVrcholov = new List<Vrchol>();
            ZoznamPrirodzenychStanic = new List<ZoskupenieStanic>();
            //aGraf = new Graf();

            this.GenerujPlochu();
            this.GenerujMesta();
            this.GenerujVyrobu();
        }

        /// <summary>
        /// Generovanie hernej plochy. KeÔûe povnina na hernej ploche m· reprezentovaù ostrov,
        /// tak sa vyuûÌva okrem inÈho aj rovnica elipsy
        /// </summary>
        private void GenerujPlochu()
        {
            Poloha pol = null;

            int stredovyRiadok = PocetRiadkov / 2;
            int stredovyStlpec = PocetStlpcov / 2;
            int polomerRiadkov = stredovyRiadok - 3;
            int polomerStlpcov = stredovyStlpec - 3;

            for (int riadok = 0; riadok < PocetRiadkov; riadok++)
            {
                for (int stlpec = 0; stlpec < PocetStlpcov; stlpec++)
                {
                    pol = new Poloha(riadok, stlpec);
                    if (Math.Pow((double)(riadok - stredovyRiadok) / (double)polomerRiadkov, 2) + Math.Pow((double)(stlpec - stredovyStlpec) / (double)polomerStlpcov, 2) <= 1)
                    {
                        aMatica[riadok, stlpec] = new Policko(pol, true);
                    }
                    else
                    {
                        aMatica[riadok, stlpec] = new Policko(pol, false);
                    }
                }
            }
        }

        /// <summary>
        /// Generovanie miest
        /// </summary>
        private void GenerujMesta()
        {
            int polia = PocetRiadkov * PocetStlpcov;
            int pocet = (int)(polia * 0.0004);
            while (pocet > 0)
            {
                pocet--;
                VytvorMesto();
            }
        }

        /// <summary>
        /// Generovanie v˝roby
        /// </summary>
        private void GenerujVyrobu()
        {
            int polia = PocetRiadkov * PocetStlpcov;
            int pocet = (int)(polia * 0.0005);
            while (pocet > 0)
            {
                pocet--;
                VytvorVyrobu(DruhVyroby.Elektraren);
                VytvorVyrobu(DruhVyroby.Pila);
                VytvorVyrobu(DruhVyroby.Oceliaren);
                VytvorVyrobu(DruhVyroby.RopnaRafineria);
                VytvorVyrobu(DruhVyroby.Tovaren);
            }
            pocet = (int)(polia * 0.0009);
            while (pocet > 0)
            {
                pocet--;
                VytvorVyrobu(DruhVyroby.UholnaBana);
                VytvorVyrobu(DruhVyroby.ZelezorudnaBana);
                VytvorVyrobu(DruhVyroby.Farma);
                VytvorVyrobu(DruhVyroby.Les);
                VytvorVyrobu(DruhVyroby.RopnaPlosina);
            }
        }

        /// <summary>
        /// Vytv·ranie v˝roby
        /// </summary>
        /// <param name="paDrVyr">druh vytv·ranej v˝roby</param>
        private void VytvorVyrobu(DruhVyroby paDrVyr)
        {

            int riadok = Nahoda.NahodnyInt(0, PocetRiadkov - 3);
            int stlpec = Nahoda.NahodnyInt(0, PocetStlpcov - 3);
            Vyroba vyr = new Vyroba(paDrVyr, new Poloha(riadok, stlpec));

            int riadokMax = riadok + vyr.PocetRiadkov;
            int stlpecMax = stlpec + vyr.PocetStlpcov;

            bool mUm;
            if (paDrVyr == DruhVyroby.RopnaPlosina)
            {
                mUm = MoznostUmiestnit(riadok, riadokMax, stlpec, stlpecMax, false, false);
                if (mUm)
                {
                    ZoznamPrirodzenychStanic.Add(vyr.Zoskupenie);
                }
            }else if (paDrVyr == DruhVyroby.RopnaRafineria)
            {
                mUm = MoznostUmiestnit(riadok, riadokMax, stlpec, stlpecMax, false, true);
            }
            else
            {
                mUm = MoznostUmiestnit(riadok, riadokMax, stlpec, stlpecMax, true, false);
            }

            if (mUm)
            {
                for (int i = riadok; i < riadokMax; i++)
                {
                    for (int j = stlpec; j < stlpecMax; j++)
                    {
                        aMatica[i, j].Vyroba = vyr;
                    }
                }
                aVyroba.Add(vyr);
            }
            else
            {
                VytvorVyrobu(paDrVyr);
            }

        }

        /// <summary>
        /// Vytv·ranie miest
        /// </summary>
        private void VytvorMesto()
        {
            int riadok = Nahoda.NahodnyInt(CBocnePolia, PocetRiadkov - CBocnePolia);
            int stlpec = Nahoda.NahodnyInt(CBocnePolia, PocetStlpcov - CBocnePolia);
            Mesto ms = new Mesto(new Poloha(riadok, stlpec), aPoradieMesta);
            int riadokMax = riadok + ms.PocetRiadkov;
            int stlpecMax = stlpec + ms.PocetStlpcov;

            if (MoznostUmiestnit(riadok, riadokMax, stlpec, stlpecMax, true, false))
            {
                for (int i = riadok; i < riadokMax; i++)
                {
                    for (int j = stlpec; j < stlpecMax; j++)
                    {
                        aMatica[i, j].Vyroba = ms;
                    }
                }
                aMesta.Add(ms);
                aPoradieMesta++;
            }
            else
            {
                VytvorMesto();
            }
        }

        /// <summary>
        /// zisùovanie, Ëi je moûnÈ dan˙ v˝robu umiestniù
        /// </summary>
        /// <param name="paRiadok">pozÌcia riadok</param>
        /// <param name="paRiadokMax">rozmer</param>
        /// <param name="paStlpec">pozÌcia stÂpe</param>
        /// <param name="paStlpecMax">rozmer</param>
        /// <param name="paPevnina">pevnina</param>
        /// <param name="paRafineria">Ëi je rafinerie</param>
        /// <returns>Ëi to je moûnÈ</returns>
        private bool MoznostUmiestnit(int paRiadok, int paRiadokMax, int paStlpec, int paStlpecMax, bool paPevnina, bool paRafineria)
        {
            bool daSa = true;
            for (int i = paRiadok; i < paRiadokMax; i++)
            {
                for (int j = paStlpec; j < paStlpecMax; j++)
                {
                    if (paPevnina)
                    {
                        daSa = aMatica[i, j].JeMoznaVystavbaVyroby();
                    }
                    else if (paRafineria)
                    {
                        daSa = aMatica[i, j].JeMoznaVystavbaRafinerie();
                    }
                    else
                    {
                        if (i < PocetRiadkov && j < PocetStlpcov)
                        {
                            daSa = aMatica[i, j].JeMoznaVystavbaRopnejPlosiny();
                        }
                    }
                    if (daSa == false)
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        /// <summary>
        /// Vr·ti hern˙ plochu
        /// </summary>
        /// <returns></returns>
        public Policko[,] DajMaticu()
        {
            return aMatica;
        }

        
        /// <summary>
        /// Kontrola polÌËok, kÙli moûnosti vytvoriù graf
        /// </summary>
        public void PrejdiPolicka()
        {
            ZmazGraf();

            for (int riadok = 0; riadok < PocetRiadkov; riadok++)
            {
                for (int stlpec = 0; stlpec < PocetStlpcov; stlpec++)
                {
                    this.VytvorGraf(riadok, stlpec);
                }
            }
            HranyVOpacnomSmere();
            foreach (var item in Hra.DajInstanciu().Spolocnost.DopravneProstriedky)
            {
                item.NajdiTrasu();
            }
        }

        /// <summary>
        /// proces vytv·rania grafu
        /// </summary>
        private void VytvorGraf(int paRiadok, int paStlpec) 
        {
            Policko aktualnePolicko = aMatica[paRiadok, paStlpec];
            Policko susednePolicko;
            if (aktualnePolicko.Zastavane is Cesta)
            {
                SmerCesty smer = (aktualnePolicko.Zastavane as Cesta).Orientacia;

                switch (smer)
                {
                    case SmerCesty.vodorovne:

                        susednePolicko = aMatica[paRiadok, paStlpec - 1];

                        if (aktualnePolicko.Prostriedky())
                        {
                            KontrolaVrcholCestyVlavo(aktualnePolicko, susednePolicko);
                        }
                        else
                        {
                            KontrolaRovnaCestaLava(aktualnePolicko, susednePolicko);
                        }
                        break;

                    case SmerCesty.zvisle:

                        susednePolicko = aMatica[paRiadok - 1, paStlpec];
                        if (aktualnePolicko.Prostriedky())
                        {
                            KontrolaVrcholCestyHore(aktualnePolicko, susednePolicko);
                        }
                        else
                        {
                            KontrolaRovnaCestaHore(aktualnePolicko, susednePolicko);
                        }
                        break;

                    case SmerCesty.zakHoreVpravo:
                    case SmerCesty.odbZvysleVpravo:

                        susednePolicko = aMatica[paRiadok - 1, paStlpec];
                        KontrolaVrcholCestyHore(aktualnePolicko, susednePolicko);
                        break;

                    case SmerCesty.zakDoleVlavo:
                    case SmerCesty.odbVodorovneDole:

                        susednePolicko = aMatica[paRiadok, paStlpec - 1];
                        KontrolaVrcholCestyVlavo(aktualnePolicko, susednePolicko);
                        break;

                    case SmerCesty.krizovatka:
                    case SmerCesty.odbVodorovneHore:
                    case SmerCesty.odbZvysleVlavo:
                    case SmerCesty.zakHoreVlavo:

                        susednePolicko = aMatica[paRiadok - 1, paStlpec];
                        KontrolaVrcholCestyHore(aktualnePolicko, susednePolicko);
                        susednePolicko = aMatica[paRiadok, paStlpec - 1];
                        KontrolaVrcholCestyVlavo(aktualnePolicko, susednePolicko);
                        break;

                    case SmerCesty.zakDoleVpravo:
                        VyrvorVrchol(aktualnePolicko);
                        break;
                }
            }
            else if (aktualnePolicko.Zastavane is Zastavka)
            {
                SmerZast smerZ = (aktualnePolicko.Zastavane as Zastavka).SmerZast;
                if (smerZ == SmerZast.horizontalny)
                {
                    susednePolicko = aMatica[paRiadok, paStlpec - 1];
                    KontrolaVrcholCestyVlavo(aktualnePolicko, susednePolicko);
                }
                else
                {
                    susednePolicko = aMatica[paRiadok - 1, paStlpec];
                    KontrolaVrcholCestyHore(aktualnePolicko, susednePolicko);
                }

            }
            else if (aktualnePolicko.Zastavane is Zeleznica)
            {
                SmerInf smer = (aktualnePolicko.Zastavane as Zeleznica).Orientacia;
                if (smer == SmerInf.horizontalny)
                {
                    susednePolicko = aMatica[paRiadok, paStlpec - 1];

                    if (aktualnePolicko.Prostriedky())
                    {
                        KontrolaVrcholZeleznicaVlavo(aktualnePolicko, susednePolicko);
                    }
                    else
                    {
                        KontrolaZeleznicaRovnaVlavo(aktualnePolicko, susednePolicko);
                    }
                }
                else if (smer == SmerInf.vertikalny)
                {
                    susednePolicko = aMatica[paRiadok - 1, paStlpec];

                    if (aktualnePolicko.Prostriedky())
                    {
                        KontrolaVrcholZeleznicaHore(aktualnePolicko, susednePolicko);
                    }
                    else
                    {
                        KontrolaZeleznicaRovnaHore(aktualnePolicko, susednePolicko);
                    }
                }
                else if (smer == SmerInf.zatackaHoreVpravo)
                {
                    susednePolicko = aMatica[paRiadok - 1, paStlpec];

                    KontrolaVrcholZeleznicaHore(aktualnePolicko, susednePolicko);

                }
                else if (smer == SmerInf.zatackaHoreVlavo)
                {
                    susednePolicko = aMatica[paRiadok - 1, paStlpec];
                    KontrolaVrcholZeleznicaHore(aktualnePolicko, susednePolicko);

                    susednePolicko = aMatica[paRiadok, paStlpec - 1];
                    KontrolaVrcholZeleznicaVlavo(aktualnePolicko, susednePolicko);
                }
                else if (smer == SmerInf.zatackaDoleVlavo)
                {
                    susednePolicko = aMatica[paRiadok, paStlpec - 1];
                    KontrolaVrcholZeleznicaVlavo(aktualnePolicko, susednePolicko);
                }
                else if (smer == SmerInf.zatackaDoleVpravo)
                {
                    VyrvorVrchol(aktualnePolicko);
                }
            }
            else if (aktualnePolicko.Zastavane is ZeleznicnaStanica)
            {
                if ((aktualnePolicko.Zastavane as ZeleznicnaStanica).SmerZastavky == SmerZast.horizontalny)
                {
                    susednePolicko = aMatica[paRiadok, paStlpec - 1];
                    KontrolaVrcholZeleznicaVlavo(aktualnePolicko, susednePolicko);
                }
                else
                {
                    susednePolicko = aMatica[paRiadok - 1, paStlpec];
                    KontrolaVrcholZeleznicaHore(aktualnePolicko, susednePolicko);
                }
            }
        }

        /// <summary>
        /// Vymazani starÈho grafu
        /// </summary>
        private void ZmazGraf()
        {
            aZoznamHran.Clear();
            aZoznamVrcholov.Clear();

            for (int riadok = 0; riadok < PocetRiadkov; riadok++)
            {
                for (int stlpec = 0; stlpec < PocetStlpcov; stlpec++)
                {
                    aMatica[riadok, stlpec].Vrchol = null;
                    aMatica[riadok, stlpec].Hrana = null;
                }
            }
        }

        /// <summary>
        /// Vytv·ranie hrany ak sa vedæa nenach·dza vrchol
        /// </summary>
        /// <param name="paPolicko">polÌËko</param>
        private void VytvorNovuHranu(Policko paPolicko)
        {
            Hrana hr = new Hrana();
            paPolicko.Vrchol = null;
            paPolicko.Hrana = hr;
            hr.PridajPolicko(paPolicko);
            hr.Vrchol1 = null;
            aZoznamHran.Add(hr);
        }

        /// <summary>
        /// Vytv·ranie hrany ak sa vedæa nach·dza vrchol
        /// </summary>
        /// <param name="paPolicko">policko</param>
        /// <param name="paPolickoVedlajsie">susedne policko</param>
        private void VytvorNovuHranu(Policko paPolicko, Policko paPolickoVedlajsie)
        {
            Hrana hr = new Hrana();
            paPolicko.Hrana = hr;
            paPolicko.Vrchol = null;
            hr.PridajPolicko(paPolicko);
            hr.Vrchol1 = paPolickoVedlajsie.Vrchol;
            aZoznamHran.Add(hr);
        }

        /// <summary>
        /// Napojenie hrany na uû existuj˙cu hranu
        /// </summary>
        /// <param name="paPolicko">policko</param>
        /// <param name="paPolickoVedlajsie">susedne policko</param>
        private void PosunHranu(Policko paPolicko, Policko paPolickoVedlajsie)
        {
            Hrana hr = paPolickoVedlajsie.Hrana;
            paPolicko.Hrana = hr;
            paPolicko.Vrchol = null;
            hr.PridajPolicko(paPolicko);
        }

        /// <summary>
        /// vytvorenie novÈho vrcholu 
        /// </summary>
        /// <param name="paPolicko">na ktorom polÌËku</param>
        private void VyrvorVrchol(Policko paPolicko)
        {
            Vrchol vr;
            if (paPolicko.Vrchol == null)
            {
                vr = new Vrchol(paPolicko);
                paPolicko.Vrchol = vr;
                aZoznamVrcholov.Add(vr);
            }
            else
            {
                vr = paPolicko.Vrchol;
            }
            paPolicko.Hrana = null;
        }

        /// <summary>
        /// Vytvorenie vrcholu vedæa vrchoku
        /// </summary>
        /// <param name="paPolicko">policko</param>
        /// <param name="paPolickoVedlajsie">susedne policko</param>
        private void VytvorVrcholVedlaVrcholu(Policko paPolicko, Policko paPolickoVedlajsie)
        {
            Vrchol vr;
            if (paPolicko.Vrchol == null)
            {
                vr = new Vrchol(paPolicko);
                paPolicko.Vrchol = vr;
                aZoznamVrcholov.Add(vr);
            }
            else
            {
                vr = paPolicko.Vrchol;
            }
            paPolicko.Hrana = null;
            Hrana hr = new Hrana();
            hr.Vrchol1 = paPolickoVedlajsie.Vrchol;
            hr.Vrchol2 = vr;
            aZoznamHran.Add(hr);
        }

        /// <summary>
        /// vytv·ranie vrcholu napojenÈho na hranu
        /// </summary>
        /// <param name="paPolicko">na ktorom polÌËku</param>
        /// <param name="paPolickoVedlajsie">susednÈ polÌËko</param>
        private void VytvorVrcholNapojenyNaHranu(Policko paPolicko, Policko paPolickoVedlajsie)
        {
            Vrchol vr;
            if (paPolicko.Vrchol == null)
            {
                vr = new Vrchol(paPolicko);
                paPolicko.Vrchol = vr;
                aZoznamVrcholov.Add(vr);
            }
            else
            {
                vr = paPolicko.Vrchol;
            }

            paPolicko.Hrana = null;
            paPolickoVedlajsie.Hrana.Vrchol2 = vr;
        }

        /// <summary>
        /// jedna z potrebn˝ch kontrÙl
        /// </summary>
        /// <param name="paPolicko">na ktorom polÌËku</param>
        /// <param name="paSusednePolicko">susednÈ polÌËko</param>
        private void KontrolaVrcholCestyVlavo(Policko paPolicko, Policko paSusednePolicko)
        {

            if (paSusednePolicko.Zastavane is Cesta)
            {
                SmerCesty smerPredchodcu = (paSusednePolicko.Zastavane as Cesta).Orientacia;
                if (smerPredchodcu == SmerCesty.vodorovne)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        VytvorVrcholNapojenyNaHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                    }

                }
                else if (smerPredchodcu == SmerCesty.zakDoleVpravo || smerPredchodcu == SmerCesty.zakHoreVpravo ||
                    smerPredchodcu == SmerCesty.krizovatka || smerPredchodcu == SmerCesty.odbVodorovneDole ||
                    smerPredchodcu == SmerCesty.odbVodorovneHore || smerPredchodcu == SmerCesty.odbZvysleVpravo)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is Zastavka)
            {
                if ((paSusednePolicko.Zastavane as Zastavka).SmerZast == SmerZast.horizontalny)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else
            {
                VyrvorVrchol(paPolicko);
            }
        }

        /// <summary>
        /// jedna z potrebn˝ch kontrÙl
        /// </summary>
        /// <param name="paPolicko">na ktorom polÌËku</param>
        /// <param name="paSusednePolicko">susednÈ polÌËko</param>
        private void KontrolaVrcholCestyHore(Policko paPolicko, Policko paSusednePolicko)
        {
            if (paSusednePolicko.Zastavane is Cesta)
            {
                SmerCesty smerPredchodcu = (paSusednePolicko.Zastavane as Cesta).Orientacia;
                if (smerPredchodcu == SmerCesty.zvisle)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        VytvorVrcholNapojenyNaHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                    }
                }
                else if (smerPredchodcu == SmerCesty.zakDoleVlavo || smerPredchodcu == SmerCesty.zakDoleVpravo ||
                    smerPredchodcu == SmerCesty.krizovatka || smerPredchodcu == SmerCesty.odbVodorovneDole ||
                    smerPredchodcu == SmerCesty.odbZvysleVlavo || smerPredchodcu == SmerCesty.odbZvysleVpravo)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is Zastavka)
            {
                if ((paSusednePolicko.Zastavane as Zastavka).SmerZast == SmerZast.vertikalny)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else
            {
                VyrvorVrchol(paPolicko);
            }
        }

        /// <summary>
        /// jedna z potrebn˝ch kontrÙl
        /// </summary>
        /// <param name="paPolicko">na ktorom polÌËku</param>
        /// <param name="paSusednePolicko">susednÈ polÌËko</param>
        private void KontrolaRovnaCestaHore(Policko paPolicko, Policko paSusednePolicko)
        {
            if (paSusednePolicko.Zastavane is Cesta)
            {
                SmerCesty smerPredchodcu = (paSusednePolicko.Zastavane as Cesta).Orientacia;
                if (smerPredchodcu == SmerCesty.zvisle)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        PosunHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorNovuHranu(paPolicko, paSusednePolicko);
                    }
                }
                else if (smerPredchodcu == SmerCesty.zakDoleVpravo || smerPredchodcu == SmerCesty.zakDoleVlavo ||
                    smerPredchodcu == SmerCesty.krizovatka || smerPredchodcu == SmerCesty.odbVodorovneDole ||
                    smerPredchodcu == SmerCesty.odbZvysleVlavo || smerPredchodcu == SmerCesty.odbZvysleVpravo)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is Zastavka)
            {
                if ((paSusednePolicko.Zastavane as Zastavka).SmerZast == SmerZast.vertikalny)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }
            }
            else
            {
                VytvorNovuHranu(paPolicko);
            }
        }

        /// <summary>
        /// jedna z potrebn˝ch kontrÙl
        /// </summary>
        /// <param name="paPolicko">na ktorom polÌËku</param>
        /// <param name="paSusednePolicko">susednÈ polÌËko</param>
        private void KontrolaRovnaCestaLava(Policko paPolicko, Policko paSusednePolicko)
        {
            if (paSusednePolicko.Zastavane is Cesta)
            {
                SmerCesty smerPredchodcu = (paSusednePolicko.Zastavane as Cesta).Orientacia;
                if (smerPredchodcu == SmerCesty.vodorovne)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        PosunHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorNovuHranu(paPolicko, paSusednePolicko);
                    }
                }
                else if (smerPredchodcu == SmerCesty.zakDoleVpravo || smerPredchodcu == SmerCesty.zakHoreVpravo ||
                    smerPredchodcu == SmerCesty.krizovatka || smerPredchodcu == SmerCesty.odbVodorovneDole ||
                    smerPredchodcu == SmerCesty.odbVodorovneHore || smerPredchodcu == SmerCesty.odbZvysleVpravo)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is Zastavka)
            {
                if ((paSusednePolicko.Zastavane as Zastavka).SmerZast == SmerZast.horizontalny)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }
            }
            else
            {
                VytvorNovuHranu(paPolicko);
            }
        }

        /// <summary>
        /// jedna z potrebn˝ch kontrÙl
        /// </summary>
        /// <param name="paPolicko">na ktorom polÌËku</param>
        /// <param name="paSusednePolicko">susednÈ polÌËko</param>
        private void KontrolaZeleznicaRovnaHore(Policko paPolicko, Policko paSusednePolicko)
        {
            if (paSusednePolicko.Zastavane is Zeleznica)
            {
                SmerInf smerPredchodcu = (paSusednePolicko.Zastavane as Zeleznica).Orientacia;
                if (smerPredchodcu == SmerInf.vertikalny)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        PosunHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorNovuHranu(paPolicko, paSusednePolicko);
                    }
                }
                else if (smerPredchodcu == SmerInf.zatackaDoleVpravo || smerPredchodcu == SmerInf.zatackaDoleVlavo)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is ZeleznicnaStanica)
            {
                if ((paSusednePolicko.Zastavane as ZeleznicnaStanica).SmerZastavky == SmerZast.vertikalny)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }

            }
            else
            {
                VytvorNovuHranu(paPolicko);
            }
        }

        private void KontrolaZeleznicaRovnaVlavo(Policko paPolicko, Policko paSusednePolicko)
        {
            if (paSusednePolicko.Zastavane is Zeleznica)
            {
                SmerInf smerPredchodcu = (paSusednePolicko.Zastavane as Zeleznica).Orientacia;
                if (smerPredchodcu == SmerInf.horizontalny)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        PosunHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorNovuHranu(paPolicko, paSusednePolicko);
                    }
                }
                else if (smerPredchodcu == SmerInf.zatackaDoleVpravo || smerPredchodcu == SmerInf.zatackaHoreVpravo)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is ZeleznicnaStanica)
            {
                if ((paSusednePolicko.Zastavane as ZeleznicnaStanica).SmerZastavky == SmerZast.horizontalny)
                {
                    VytvorNovuHranu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VytvorNovuHranu(paPolicko);
                }

            }
            else
            {
                VytvorNovuHranu(paPolicko);
            }
        }

        private void KontrolaVrcholZeleznicaHore(Policko paPolicko, Policko paSusednePolicko)
        {
            if (paSusednePolicko.Zastavane is Zeleznica)
            {
                SmerInf smerPredchodcu = (paSusednePolicko.Zastavane as Zeleznica).Orientacia;
                if (smerPredchodcu == SmerInf.vertikalny)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        VytvorVrcholNapojenyNaHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                    }
                }
                else if (smerPredchodcu == SmerInf.zatackaDoleVlavo || smerPredchodcu == SmerInf.zatackaDoleVpravo)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is ZeleznicnaStanica)
            {
                if ((paSusednePolicko.Zastavane as ZeleznicnaStanica).SmerZastavky == SmerZast.vertikalny)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else
            {
                VyrvorVrchol(paPolicko);
            }
        }

        private void KontrolaVrcholZeleznicaVlavo(Policko paPolicko, Policko paSusednePolicko)
        {
            if (paSusednePolicko.Zastavane is Zeleznica)
            {
                SmerInf smerPredchodcu = (paSusednePolicko.Zastavane as Zeleznica).Orientacia;
                if (smerPredchodcu == SmerInf.horizontalny)
                {
                    if (paSusednePolicko.Vrchol == null)
                    {
                        VytvorVrcholNapojenyNaHranu(paPolicko, paSusednePolicko);
                    }
                    else
                    {
                        VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                    }
                }
                else if (smerPredchodcu == SmerInf.zatackaHoreVpravo || smerPredchodcu == SmerInf.zatackaDoleVpravo)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else if (paSusednePolicko.Zastavane is ZeleznicnaStanica)
            {
                if ((paSusednePolicko.Zastavane as ZeleznicnaStanica).SmerZastavky == SmerZast.horizontalny)
                {
                    VytvorVrcholVedlaVrcholu(paPolicko, paSusednePolicko);
                }
                else
                {
                    VyrvorVrchol(paPolicko);
                }
            }
            else
            {
                VyrvorVrchol(paPolicko);
            }
        }

        /// <summary>
        /// Vytvorenie digrafu, teda kaûd· z hr·n sa zaznamen· aj v opraËnom smere
        /// </summary>
        private void HranyVOpacnomSmere() {
            int pocet = aZoznamHran.Count;
            int hodnotaAktualnej;
            for (int i = 0; i < pocet; i++)
            {
                Hrana aktualna = aZoznamHran[i];
                hodnotaAktualnej = aktualna.DajHodnotu();

                Hrana nova = new Hrana();
                
                nova.Vrchol1 = aktualna.Vrchol2;
                nova.Vrchol2 = aktualna.Vrchol1;


                if (hodnotaAktualnej > 1)
                {
                    for (int a = hodnotaAktualnej - 2; a >= 0; --a)
                    {
                        nova.PridajPolicko(aktualna.DajPolicko(a));
                    }
                }
                aZoznamHran.Add(nova);
            }
        }

        /// <summary>
        /// N·vrat vrcholov do pÙvodnÈho stavu, po ich pouûitÌ na vyhæadanie trasy
        /// </summary>
        public void PovodnyStavVrcholov()
        {
            foreach (var item in aZoznamVrcholov)
            {
                item.ZaciatocnyStav();
            }
        }

    }//end HernaPlocha

}//end namespace mapa