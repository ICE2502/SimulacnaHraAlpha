///////////////////////////////////////////////////////////
//  ZoskupenieStanic.cs
//  Implementation of the Class ZoskupenieStanic
//  Generated by Enterprise Architect
//  Created on:      17-2-2016 17:13:23
//  Original author: Dobroslav Grygar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using SimulacnaHra.gui;
using SimulacnaHra.hra;
using SimulacnaHra.prvkyHry.vyroba;

namespace SimulacnaHra.prvkyHry.infrastruktura {

	/// <summary>
	/// Zoskupenie stanÌc je logick˝m prepojenÌm susediach stanÌc
	/// </summary>
	public class ZoskupenieStanic : IMaRozhranie{

		private List<PrepravJednotka> aCaka;
		private HashSet<TypPrepravJednotky> aJeMozeNakladat;
        private HashSet<TypPrepravJednotky> aJeMozeVykladat;
        private HashSet<Vyroba> aObsluhovanePodniky;
        private HashSet<Stanica> aStanice;
	    private Dictionary<TypPrepravJednotky, int> aPoctyCakajucich;
	    private ZoskupenieForm aOkno = null;

        public bool Uzamknute { get; set; }
	    public String PovoleneVozidla { get; internal set; }
        public Poloha Poloha { get { return aStanice.First().Poloha; }}
	    public HashSet<Stanica> Stanice {get { return aStanice; }}
        public HashSet<Vyroba> ObsluhovanePodniky { get { return aObsluhovanePodniky; } }
        public Dictionary<TypPrepravJednotky, int> PoctyCakajucich { get { return aPoctyCakajucich; } }

        /// <summary>
        /// Konötruktor inicializuje vöetko potrebnÈ
        /// Zoskupenie je po vytovrenÌ uzamknutÈ, teda nemÙûe prÌjmaù ûiadna vrobenÈ jednotky
        /// </summary>
	    public ZoskupenieStanic(){
            aCaka = new List<PrepravJednotka>();
            aJeMozeNakladat = new HashSet<TypPrepravJednotky>();
            aJeMozeVykladat = new HashSet<TypPrepravJednotky>();
            aObsluhovanePodniky = new HashSet<Vyroba>();
            aStanice = new HashSet<Stanica>();
            Uzamknute = true;
            aPoctyCakajucich = new Dictionary<TypPrepravJednotky, int>();

            foreach (TypPrepravJednotky item in Enum.GetValues(typeof(TypPrepravJednotky)))
            {
                aPoctyCakajucich.Add(item, 0);
            }
		}

        /// <summary>
        /// Pridanie stanice
        /// </summary>
        /// <param name="paStanica">pridavana stanica</param>
        /// <returns>Ëi sa podarilo</returns>
        public bool PridajStanicu(Stanica paStanica){
            bool odp = aStanice.Add(paStanica);
            this.AktualizujInfoProstriedky();
            return odp;
        }

        /// <summary>
        /// Pridanie v˝roby
        /// </summary>
        /// <param name="paVyroba">pridavana v˝roba</param>
        /// <returns>Ëi sa podarilo</returns>
        public bool PridajVyrobu(Vyroba paVyroba) {
            bool odp = aObsluhovanePodniky.Add(paVyroba);
            this.AktualizujInfoVyroba();
            return odp;
        }

        /// <summary>
        /// Pridanie vyrobenej jednotky do zoznamu Ëakaj˙cich
        /// </summary>
        /// <param name="paPrepJ">pridavana v. jednotka</param>
        public void NechajCakat(PrepravJednotka paPrepJ) {
            aCaka.Add(paPrepJ);
            AktualizujPocty();
        }

        /// <summary>
        /// Vymazanie pripojenej stanice
        /// </summary>
        /// <param name="paStanica"></param>
        public void ZmazPripojenuStanicu(Stanica paStanica) 
        {
            aStanice.Remove(paStanica);

            if (aStanice.Count == 0)
            {
                foreach (Vyroba item in aObsluhovanePodniky)
                {
                    item.Zoskupenie = null;
                }
                Hra.DajInstanciu().Spolocnost.VymazZoskupenie(this);
            }
            else
            {
                this.AktualizujInfoProstriedky();
            }
        }

        /// <summary>
        /// Aktualiz·cia inform·cie o Ëakaj˙cich jednotk·ch
        /// </summary>
	    private void AktualizujPocty()
	    {

            List<TypPrepravJednotky> keys = new List<TypPrepravJednotky>(aPoctyCakajucich.Keys);
            foreach (TypPrepravJednotky kluc in keys)
            {
                aPoctyCakajucich[kluc] = 0;
                foreach (var item in aCaka)
                {
                    if (item.Typ == kluc)
                    {
                        aPoctyCakajucich[kluc]++;
                    }
                }
            }
	    }

        /// <summary>
        /// Aktializ·cia inform·cjÌ o propojenej v˝robe
        /// </summary>
	    private void AktualizujInfoVyroba()
	    {
            aJeMozeNakladat.Clear();
            aJeMozeVykladat.Clear();
	        foreach (var podnik in aObsluhovanePodniky)
	        {
	            foreach (var prodJedn in podnik.Produkuje)
	            {
	                aJeMozeNakladat.Add(prodJedn.Key);
	            }
	            foreach (var primJedn in podnik.Prijma)
	            {
	                aJeMozeVykladat.Add(primJedn);
	            }
	        }
	    }

        /// <summary>
        /// Aktualiz·cia inform·cie o povolen˝ch dopravn˝ch prostriedkoch
        /// </summary>
	    private void AktualizujInfoProstriedky()
	    {
	        String vystup = "";
	        int cLet = 0;
            int cVlak = 0;
            int cLod = 0;
            int cAut = 0;

	        foreach (var st in aStanice)
	        {
                if (st is Letisko)
	            {
	                if (cLet == 0)
	                {
	                    vystup += "lietadla, ";
	                }
	                cLet++;
                }
                else if (st is Dok)
	            {
                    if (cLod == 0)
                    {
                        vystup += "lode, ";
                    }
                    cLod++;
	            }
                else if (st is ZeleznicnaStanica)
                {
                    if (cVlak == 0)
                    {
                        vystup += "vlaky, ";
                    }
                    cVlak++;
                }
                else if (st is Zastavka)
                {
                    if (cAut == 0)
                    {
                        vystup += "vozidl·, ";
                    }
                    cAut++;
                }
	        }
            vystup = vystup.Remove(vystup.Length - 2);
	        PovoleneVozidla = vystup;
	    }

        /// <summary>
        /// Priani jednotky
        /// </summary>
        /// <param name="paPrepravJednotka">jednotka</param>
        /// <returns>Ëi sa podarilo</returns>
	    public bool PrijmiJednotku(PrepravJednotka paPrepravJednotka)
	    {
	        return aJeMozeVykladat.Contains(paPrepravJednotka.Typ) && aObsluhovanePodniky.Any(item => item.Vyrob(paPrepravJednotka));
	    }

        /// <summary>
        /// Vydanie jednotky
        /// </summary>
        /// <param name="paTyp">typ jednotky</param>
        /// <returns>konkrÈtna v˝robn· jednotka, alebo null</returns>
	    public PrepravJednotka VydajJednotku(TypPrepravJednotky paTyp)
	    {
	        foreach (var vydavana in aCaka.Where(item => item.Typ == paTyp))
	        {
	            aCaka.Remove(vydavana);
	            return vydavana;
	        }
	        return null;
	    }

	    public void ZobrazForm()
	    {
	        if (aOkno == null)
	        {
                aOkno = new ZoskupenieForm(this);
	        }
            aOkno.Show();
            aOkno.Activate();
	    }

	    public void ZmazOkno()
	    {
	        aOkno = null;
	    }

	    public override String ToString()
	    {
	        return "Zoskupenie stanic " + "{" + PovoleneVozidla + "}, »ak·: " + aCaka.Count + " jednotiek" ;
	    }

        /// <summary>
        /// Inform·cia Ëo prÌjma
        /// </summary>
        /// <returns>string - info</returns>
	    public String Prijma()
	    {
	        String vystup = "";
	        foreach (var item in aJeMozeVykladat)
	        {
	            vystup += item.ToString() + ", ";
	        }
	        return vystup;
	    }

        /// <summary>
        /// Inform·cia Ëo poskytuje
        /// </summary>
        /// <returns>string - info</returns>
        public String Poskytuje()
        {
            String vystup = "";
            foreach (var item in aJeMozeNakladat)
            {
                vystup += item.ToString() + ", ";
            }
            return vystup;
        }
    }//end ZoskupenieStanic
}//end namespace infrastruktura