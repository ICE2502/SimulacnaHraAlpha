///////////////////////////////////////////////////////////
//  DopravnyProstriedok.cs
//  Implementation of the Class DopravnyProstriedok
//  Generated by Enterprise Architect
//  Created on:      17-2-2016 17:13:21
//  Original author: Dobroslav Grygar
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.CompilerServices;
using SimulacnaHra.gui;
using SimulacnaHra.hra;
using SimulacnaHra.prvkyHry.infrastruktura;
using SimulacnaHra.prvkyHry.mapa;
using SimulacnaHra.prvkyHry.vyroba;

namespace SimulacnaHra.prvkyHry.dopravneProstriedky
{
    /// <summary>
    /// Dopravn˝ prostriedok je z·kladnou prepravnou
    /// jednotkou tejto hry, jej zmyslom a stavebn˝m kameÚom.
    /// </summary>
    [Serializable]
    public class DopravnyProstriedok : IMaRozhranie
    {

        private List<MiestoZastavenia> aCiele;
        private List<PrepravJednotka> aNaklad;
        private string aNazov;
        private List<Policko> aTrasa;
        private int aZiskAktualny;
        private int aZiskNimulyRok;
        private PrototypDp aTyp;
        private int aAktualnaPozicia;
        private bool aNakladam;
        private Dictionary<TypPrepravJednotky, int> aNakladPocty;
        private bool aCestaDoDepa;
        private bool aJeVPohybe;
        [NonSerialized]
        private DopravnyProstriedokForm aOkno = null;

        public bool JeVCieli {
            get { return aTyp.JeVCieli; }
        }

        public bool JeVPohybe {
            get { return aJeVPohybe; }
        }

        /// <summary>
        /// Vr·ti druh vozidla
        /// </summary>
        public DruhVozidla Druh {
            get { return aTyp.Druh; }
        }

        /// <summary>
        /// PoËty n·kladu
        /// </summary>
        public Dictionary<TypPrepravJednotky, int> PoctyNakladu 
        {
            get
            {
                AktualizujPocty();
                return aNakladPocty;
            } 
        }

        /// <summary>
        /// Poloha
        /// </summary>
        public Poloha Poloha {
            get { return aTyp.Poloha; }
        }

        /// <summary>
        /// Zoznam cieæov
        /// </summary>
        public List<MiestoZastavenia> Ciele
        {
            get { return aCiele; }
        }

        /// <summary>
        /// Konötruktor, ktor˝ inicializuje vöetko potrebnÈ
        /// </summary>
        /// <param name="paTyp"></param>
        public DopravnyProstriedok(PrototypDp paTyp)
        {
            aTyp = paTyp;
            aAktualnaPozicia = -1;
            aCiele = new List<MiestoZastavenia>();
            aNaklad = new List<PrepravJednotka>();
            aNakladam = false;
            aJeVPohybe = false;
            aTyp.Skryte = true;
            aNakladPocty = new Dictionary<TypPrepravJednotky, int>();
            aCestaDoDepa = false;

            foreach (TypPrepravJednotky item in Enum.GetValues(typeof(TypPrepravJednotky)))
            {
                aNakladPocty.Add(item, 0);
            }
        }

        /// <summary>
        /// Aktualiz·cia poËtov Ëo prepravuje
        /// </summary>
        private void AktualizujPocty()
        {
            List<TypPrepravJednotky> keys = new List<TypPrepravJednotky>(aNakladPocty.Keys);
            foreach (TypPrepravJednotky kluc in keys)
            {
                aNakladPocty[kluc] = 0;
                foreach (var item in aNaklad)
                {
                    if (item.Typ == kluc)
                    {
                        aNakladPocty[kluc]++;
                    }
                }
            }
        }

        /// <summary>
        /// Pri najblyûöej prÌleûitosti pÙjde do depa
        /// Teda, keÔ prÌde do stanice
        /// </summary>
        public void ChodDoDepa()
        {
            aCestaDoDepa = true;
        }

        /// <summary>
        /// Vymazanie cieæov
        /// </summary>
        public void VymazCiele()
        {
            if (!aTyp.JeVCieli)
            {
                Sprava.Info("Nie je moûnÈ vymazaù zoznam cielov, \r\n " +
                            "dopravn˝ prostriedok musÌ byù v depe!");
            }
            else
            {
                foreach (var item in aCiele)
                {
                    item.ZnizObsluhovane();
                }

                aCiele.Clear();
                aAktualnaPozicia = -1;
                aNakladam = false;
            }
        }

        /// <summary>
        /// Pohnutie sa
        /// </summary>
        public void Start()
        {
            if (aCiele.Count >= 2)
            {
                Hra.DajInstanciu().DajHernuPlochu().PrejdiPolicka();
                aTyp.Skryte = false;
                aJeVPohybe = true;
                NajdiTrasu();
                aTyp.Strateny = false;
                Stanica stan = Hra.DajInstanciu().DajHernuPlochu().DajMaticu()[Poloha.Riadok, Poloha.Stlpec].Zastavane as Stanica;
                if (stan!= null)
                {
                    stan.OdstranOdstavene(this);
                }
            }
            else
            {
                Sprava.Info("Dopravn˝ prostriedok nem· dostatok cielov!");
            }
        }

        /// <summary>
        /// Pridanie cieæa
        /// </summary>
        /// <param name="paStanica">cieæ</param>
        /// <returns>Ëi bolo moûnÈ pridaù</returns>
        public bool PridajCiel(MiestoZastavenia paStanica)
        {
            if (paStanica.MozePriat == aTyp.Druh)
            {
                paStanica.ZvysPobluhovane();
                aCiele.Add(paStanica);
                return true;
            }
            Sprava.Info("Nekompatibiln˝ cieæ!");
            return false;
        }

        /// <summary>
        /// Vyloûenie 1 jednotky n·kladu
        /// </summary>
        /// <returns></returns>
        public bool Vyloz()
        {
            bool stav = false;
            Stanica navstivena = KonvertujMiestoNaStanicu(aCiele[aAktualnaPozicia]);
            if (navstivena == null) return false;

            navstivena.Zoskupenie.Uzamknute = false;

            if (aCestaDoDepa)
            {
                navstivena.PridajOdstavene(this);
                aCestaDoDepa = false;
                aTyp.Zastav();
                aTyp.Skryte = true;
                aJeVPohybe = false;
                Zastav();
                return false;
            }

            foreach (var item in aNaklad)
            {
                stav = navstivena.Zoskupenie.PrijmiJednotku(item);
                if (stav == true)
                {
                    item.VydajOdnemu(navstivena);
                    aNaklad.Remove(item);
                    break;
                }

            }
            Console.WriteLine("vylozenie" + stav);
            return stav;
        }

        /// <summary>
        /// Naloûenie jednej jednotky n·kladu
        /// </summary>
        /// <returns></returns>
        public bool Naloz()
        {
            Stanica navstivena = KonvertujMiestoNaStanicu(aCiele[aAktualnaPozicia]);
            if (aNaklad.Count >= aTyp.Kapacita || navstivena == null) return false;
            PrepravJednotka pr = navstivena.Zoskupenie.VydajJednotku(aTyp.TypNakladu);
            if (pr != null)
            {
                Console.WriteLine("nalozenie" + pr.ToString());
                pr.CasNalozenia = Hra.DajInstanciu().Den;
                pr.Zdroj = navstivena;
                aNaklad.Add(pr);
                return true;
            }
            return false;
        }

        /// <summary>
        /// Konverzia miesta na stanicu
        /// </summary>
        /// <param name="paMiestZastavie"></param>
        /// <returns></returns>
        private Stanica KonvertujMiestoNaStanicu(MiestoZastavenia paMiestZastavie)
        {
            return paMiestZastavie as Stanica;
        }

        /// <summary>
        /// Zastavenie
        /// </summary>
        public void Zastav()
        {
            if (aTyp.Zastav())
            {
                aJeVPohybe = false;
            }
            else
            {
                Sprava.Info("Teraz nie je moûnÈ zastaviù vozidlo!");
            }
        }

        /// <summary>
        /// Vykreslenie Obr·zku + pohyb
        /// </summary>
        /// <param name="paGafika"></param>
        public void DrawImage(Graphics paGafika)
        {
            bool mamHladatTrasu = true;
            bool najdenaTrasa = true;
            if (aTyp.Strateny)
            {
                aJeVPohybe = false;
                aTyp.DrawImage(paGafika);
                return;
            }

            if (aJeVPohybe)
            {
                if (aTyp.JeVCieli)
                {
                    najdenaTrasa = false;
                    if (aAktualnaPozicia != -1)
                    {
                        mamHladatTrasu = false;
                        if (!aNakladam)
                        {
                            if (!Vyloz())
                            {
                                aNakladam = true;
                            }
                        }
                        else if (aNakladam)
                        {
                            if (!Naloz())
                            {
                                aNakladam = false;
                                mamHladatTrasu = true;
                            }
                            
                        }
                        
                    }

                    
                    if (mamHladatTrasu)
                    {
                        if (aAktualnaPozicia < aCiele.Count - 1)
                        {
                            aAktualnaPozicia++;
                        }
                        else
                        {
                            aAktualnaPozicia = 0;
                        }
                        najdenaTrasa = aTyp.NajdiTrasu(aCiele[aAktualnaPozicia].Poloha);
                    }
                }
                if (najdenaTrasa)
                {
                    Hra.DajInstanciu().DajHernuPlochu().DajMaticu()[Poloha.Riadok, Poloha.Stlpec].OdoberDopravnyProstriedok(this);
                    aTyp.VykonajPohyb();
                    Hra.DajInstanciu().DajHernuPlochu().DajMaticu()[Poloha.Riadok, Poloha.Stlpec].PridajDopravnyProstriedok(this);
                }
            }
            aTyp.DrawImage(paGafika);
        }

        /// <summary>
        /// Vyhæadanie trasy
        /// </summary>
        public void NajdiTrasu()
        {
                if (aTyp.Druh == DruhVozidla.cestne || aTyp.Druh == DruhVozidla.kolajove)
                {
                    if (aTyp.JeVCieli == false && aJeVPohybe)
                    {
                        aTyp.NajdiTrasu(aCiele[aAktualnaPozicia].Poloha);
                    }
                }
        }

        public override string ToString()
        {
            return aTyp.ToString();
        }

        public void ZobrazForm()
        {
            if(aOkno == null)
            {
                aOkno = new DopravnyProstriedokForm(this);
            }
            aOkno.Show();
            aOkno.Activate();
        }

        public void ZmazOkno()
        {
            aOkno = null;
        }

        public string PodrobneInfo()
        {
            return aTyp.PodrobneInfo();
        }

        /// <summary>
        /// Zmazanie vöetk˝ch (aspoÚ d˙fam)
        /// referenciÌ na objekt
        /// </summary>
        public void ZmazSa()
        {
            Spolocnost spol = Hra.DajInstanciu().Spolocnost;
            spol.UpravFinancie(aTyp.Cena / 2);
            spol.ZmazDP(this);
            Zastav();
            aJeVPohybe = false;
            aTyp = null;
            if (aOkno != null)
            {
                aOkno.Close();
                aOkno = null;
            }
        }
    }//end DopravnyProstriedok

}//end namespace dopravneProstriedky